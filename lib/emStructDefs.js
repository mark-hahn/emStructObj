// Generated by CoffeeScript 1.6.2
/*
    C definitions javascript module for enStructObj project
    
    This file contains definitions for C variables and C structs
    It should be customized for your C application
    This particular file is used in a production project and can be considered a sample
    
    This module should be included before the emStructObj module in a browser
    For node, require this module.
*/


(function() {
  var exports, isNode, noise_words, pointer_size, struct_defs, typedefs, _;

  isNode = (typeof exports !== "undefined" && exports !== null) && (typeof module !== "undefined" && module !== null) && module.exports;

  if (isNode) {
    _ = require('underscore');
  } else {
    exports = window;
  }

  pointer_size = "i32";

  typedefs = {
    short: 'i16, hex',
    pg_short_t: 'i16, hex',
    pg_error: 'i16, dec',
    long: 'i32, hex',
    pg_handle: 'i32, hex',
    master_list_ptr: 'i32, hex',
    mem_debug_proc: 'i32, hex',
    purge_proc: 'i32, hex',
    free_memory_proc: 'i32, hex',
    memory_ref: 'i32, hex',
    pg_fail_info_ptr: 'i32, hex',
    pg_error_handler: 'i32, hex'
  };

  noise_words = ['PG_FAR', 'void'];

  struct_defs = "\nstruct pgm_globals\n	short					signature;			/* Used for checking/debugging */\n	pg_short_t				debug_flags;		/* Debug mode, if any */\n	pg_handle				master_handle;		/* HANDLE for master list (Windows only) */\n	pg_handle				spare_tire;			/* Used to free up some memory in tight situations */\n	master_list_ptr			master_list;		/* Contains list of all active memory_refs */\n	long					next_master;		/* Next available space in master_list */\n	long					total_unpurged;		/* Total # of bytes allocated not purged */\n	long					max_memory;			/* Maximum memory (set by app) */\n	long					purge_threshold;	/* Amount extra to purge */\n	void PG_FAR				*machine_var;		/* Machine-specific generic ptr */\n	mem_debug_proc			debug_proc;			/* Called when a bug is detected */\n	purge_proc				purge;				/* Called to purge/unpurge memory */\n	free_memory_proc		free_memory;		/* Called to free up miscellaneous memory */\n	long					purge_ref_con;		/* Reference for purge proc */\n	memory_ref				purge_info;			/* Machine-based purge information */\n	memory_ref				freemem_info;		/* List of pg_ref(s) for cache feature (2.0) */\n	long					next_mem_id;		/* Used for unique ID's assigned to refs */\n	long					current_id;			/* ID to use for MemoryAlloc's */\n	long					active_id;			/* Which ID to suppress, if any, for purging */\n	long					last_message;		/* Last message in exception handling */\n	pg_fail_info_ptr		top_fail_info;		/* Current exception in linked list */\n	void PG_FAR *			last_ref;			/* Last reference - used by external failure processing TRS/OITC */\n	pg_error_handler		last_handler;		/* Last app handler before Paige */\n	pg_error				last_error;			/* Last reported error */\n	memory_ref				debug_check;		/* Used for special-case debugging */\n	memory_ref				dispose_check;		/* Used for special-case debugging on DisposeMemory */\n	short					debug_access;		/* Used with above field */\n	void PG_FAR				*app_globals;		/* Ptr to globals for PAIGE, etc. */\n	long					creator;			/* For Mac file I/O */\n	long					fileType;			/* For Mac file I/O */\n";

}).call(this);

/*
//@ sourceMappingURL=emStructDefs.map
*/
